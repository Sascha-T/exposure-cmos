plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    runtimeClasspath.extendsFrom localRuntime
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "maven.modrinth:exposure:$rootProject.exposure_forge"
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')


    modImplementation "cc.tweaked:cc-tweaked-$rootProject.minecraft_version-forge:$rootProject.computercraft_clean"
    implementation "cc.tweaked:cc-tweaked-$rootProject.minecraft_version-forge-api:$rootProject.computercraft_clean"
    implementation "cc.tweaked:cc-tweaked-$rootProject.minecraft_version-core:$rootProject.computercraft_clean"

    forgeRuntimeLibrary "cc.tweaked:cobalt:$rootProject.cobalt_version"

    // implementation "cc.tweaked:cobalt:0.9.6"

}

processResources {
    inputs.property 'version', project.version
    inputs.property 'exposure', rootProject.exposure_clean
    inputs.property 'computercraft', rootProject.computercraft_clean

    filesMatching('META-INF/neoforge.mods.toml') {
        expand inputs.properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'out'
}

remapJar {
    input.set shadowJar.archiveFile
}
